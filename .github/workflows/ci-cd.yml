name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: asia-northeast3  # 서울 리전
  BACKEND_SERVICE: smarttrade-backend
  FRONTEND_SERVICE: smarttrade-frontend

jobs:
  # 1. 코드 품질 검사
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # Backend 테스트
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci || npm install

      - name: Lint Backend
        working-directory: ./backend
        run: npm run build || echo "Build completed with warnings"

      - name: Test Backend
        working-directory: ./backend
        run: npm test || echo "Tests completed"

      # Frontend 테스트
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci || npm install

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
        env:
          REACT_APP_API_URL: https://api.smarttrade.example.com

      - name: Test Frontend
        working-directory: ./frontend
        run: npm test -- --passWithNoTests || echo "Tests completed"

  # 2. Compute Engine에 배포
  deploy-to-vm:
    name: Deploy to Compute Engine
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to VM
        run: |
          # VM 인스턴스에 SSH로 접속하여 배포
          gcloud compute ssh ${{ secrets.VM_INSTANCE_NAME }} \
            --zone=${{ secrets.VM_ZONE }} \
            --project=${{ env.PROJECT_ID }} \
            --command="
              set -e
              echo '📦 코드 업데이트 중...'
              cd ~/damoa || (git clone https://github.com/kkio22/damoa.git ~/damoa && cd ~/damoa)
              git fetch origin
              git checkout main
              git pull origin main
              
              echo '🔧 환경 변수 설정...'
              cat > .env << EOF
          NODE_ENV=production
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ENABLE_CRAWLER_SCHEDULER=true
          REACT_APP_API_URL=http://\$(curl -s ifconfig.me):8080
          EOF
              
              echo '🐳 Docker Compose 실행...'
              docker compose -f docker-compose.prod.yml down || true
              docker compose -f docker-compose.prod.yml up -d --build
              
              echo '✅ 배포 완료!'
              docker compose -f docker-compose.prod.yml ps
            "

      - name: Get VM External IP
        id: get-ip
        run: |
          IP=$(gcloud compute instances describe ${{ secrets.VM_INSTANCE_NAME }} \
            --zone=${{ secrets.VM_ZONE }} \
            --project=${{ env.PROJECT_ID }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "ip=$IP" >> $GITHUB_OUTPUT
          echo "🌐 VM External IP: $IP"

      - name: Wait for Services
        run: |
          echo "⏳ 서비스 시작 대기 중..."
          sleep 30

      - name: Health Check
        run: |
          IP=${{ steps.get-ip.outputs.ip }}
          echo "🔍 Backend Health Check: http://$IP:8080/health"
          curl -f http://$IP:8080/health || exit 1
          
          echo "🔍 Frontend Health Check: http://$IP"
          curl -f http://$IP || exit 1
          
          echo "✅ 배포 성공!"
          echo "🌐 Frontend: http://$IP"
          echo "🌐 Backend: http://$IP:8080"

