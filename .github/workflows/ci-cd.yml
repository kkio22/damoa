name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1  # 미국 중부 리전
  BACKEND_SERVICE: smarttrade-backend
  FRONTEND_SERVICE: smarttrade-frontend

jobs:
  # 1. 코드 품질 검사
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # Backend 테스트
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci || npm install

      - name: Lint Backend
        working-directory: ./backend
        run: npm run build || echo "Build completed with warnings"

      - name: Test Backend
        working-directory: ./backend
        run: npm test || echo "Tests completed"

      # Frontend 테스트
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci || npm install

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build
        env:
          REACT_APP_API_URL: https://api.smarttrade.example.com

      - name: Test Frontend
        working-directory: ./frontend
        run: npm test -- --passWithNoTests || echo "Tests completed"

  # 2. Compute Engine에 배포
  deploy-to-vm:
    name: Deploy to Compute Engine
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2


      - name: Deploy to VM
        run: |
          # VM 인스턴스에 SSH로 접속하여 배포
          gcloud compute ssh ${{ secrets.VM_INSTANCE_NAME }} \
            --zone=${{ secrets.VM_ZONE }} \
            --project=${{ env.PROJECT_ID }} \
            --command="
              set -e
              echo '📦 코드 업데이트 중...'
              cd ~/damoa || (git clone https://github.com/kkio22/damoa.git ~/damoa && cd ~/damoa)
              git fetch origin
              git checkout main
              git pull origin main
              
              echo '🔧 환경 변수 설정...'
              cat > .env << EOF
          NODE_ENV=production
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=7d
          ENABLE_CRAWLER_SCHEDULER=false
          REACT_APP_API_URL=http://\$(curl -s ifconfig.me):8080
          CORS_ORIGIN=http://\$(curl -s ifconfig.me)
          EOF
              
              echo '🐳 Docker Compose 실행...'
              sudo docker compose -f docker-compose.prod.yml down || true
              sudo docker compose -f docker-compose.prod.yml up -d --build
              
              echo '⏳ 컨테이너 시작 대기 중...'
              sleep 10
              
              echo '📊 컨테이너 상태 확인:'
              sudo docker compose -f docker-compose.prod.yml ps
              
              echo ''
              echo '📝 Backend 로그 (최근 20줄):'
              sudo docker compose -f docker-compose.prod.yml logs --tail=20 backend || true
              
              echo ''
              echo '📝 Frontend 로그 (최근 20줄):'
              sudo docker compose -f docker-compose.prod.yml logs --tail=20 frontend || true
              
              echo ''
              echo '✅ 배포 스크립트 완료!'
            "

      - name: Get VM External IP
        id: get-ip
        run: |
          IP=$(gcloud compute instances describe ${{ secrets.VM_INSTANCE_NAME }} \
            --zone=${{ secrets.VM_ZONE }} \
            --project=${{ env.PROJECT_ID }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "ip=$IP" >> $GITHUB_OUTPUT
          echo "🌐 VM External IP: $IP"

      - name: Verify VM Tags and Firewall
        run: |
          echo "🔍 VM 네트워크 태그 확인:"
          gcloud compute instances describe ${{ secrets.VM_INSTANCE_NAME }} \
            --zone=${{ secrets.VM_ZONE }} \
            --project=${{ env.PROJECT_ID }} \
            --format='get(tags.items)'
          
          echo ""
          echo "🔍 방화벽 규칙 확인:"
          gcloud compute firewall-rules list \
            --project=${{ env.PROJECT_ID }} \
            --filter="targetTags:damoa-server OR targetTags:http-server" \
            --format="table(name,targetTags,allowed)"

      - name: Wait for Services
        run: |
          echo "⏳ 서비스 시작 대기 중..."
          sleep 60

      - name: Check Services on VM
        run: |
          echo "🔍 VM 내부 서비스 상태 확인..."
          gcloud compute ssh ${{ secrets.VM_INSTANCE_NAME }} \
            --zone=${{ secrets.VM_ZONE }} \
            --project=${{ env.PROJECT_ID }} \
            --command="
              echo '📊 Docker 컨테이너 상태:'
              cd ~/damoa || cd ~/used\ trade
              sudo docker compose -f docker-compose.prod.yml ps
              
              echo ''
              echo '🔌 포트 리스닝 확인:'
              sudo netstat -tlnp | grep -E ':(80|8080)' || echo '포트가 리스닝 중이지 않습니다!'
              
              echo ''
              echo '🌐 로컬 헬스 체크:'
              curl -s http://localhost:8080/health || echo '로컬에서도 Backend에 연결할 수 없습니다!'
            "

      - name: Health Check
        continue-on-error: true
        id: health-check
        run: |
          IP=${{ steps.get-ip.outputs.ip }}
          
          echo "🔍 Backend Health Check: http://$IP:8080/health"
          MAX_RETRIES=10
          RETRY_DELAY=10
          SUCCESS=false
          
          # Backend 헬스 체크 (재시도 로직)
          for i in $(seq 1 $MAX_RETRIES); do
            echo "시도 $i/$MAX_RETRIES..."
            if curl -f --max-time 10 http://$IP:8080/health 2>&1; then
              echo "✅ Backend 정상 작동!"
              SUCCESS=true
              break
            fi
            echo "❌ 실패 - 대기 중... (${RETRY_DELAY}초)"
            sleep $RETRY_DELAY
          done
          
          if [ "$SUCCESS" = false ]; then
            echo ""
            echo "❌ ============================================"
            echo "❌ Backend 헬스 체크 실패!"
            echo "❌ ============================================"
            echo ""
            echo "📝 문제 해결 체크리스트:"
            echo "  1. VM 네트워크 태그 확인 (위에서 출력된 태그 확인)"
            echo "  2. 방화벽 규칙 확인 (위에서 출력된 방화벽 규칙 확인)"
            echo "  3. VM 내부 포트 리스닝 상태 확인 (위에서 출력된 netstat 확인)"
            echo "  4. Docker 컨테이너 로그 확인 (위에서 출력된 로그 확인)"
            echo ""
            exit 1
          fi
          
          # Frontend 헬스 체크
          echo ""
          echo "🔍 Frontend Health Check: http://$IP"
          if curl -f --max-time 10 http://$IP 2>/dev/null; then
            echo "✅ Frontend 정상 작동!"
          else
            echo "⚠️  Frontend 헬스 체크 실패 (계속 진행)"
          fi
          
          echo ""
          echo "✅ ============================================"
          echo "✅ 배포 완료!"
          echo "✅ ============================================"
          echo "🌐 Frontend: http://$IP"
          echo "🌐 Backend: http://$IP:8080"

      - name: Deployment Summary
        if: always()
        run: |
          IP=${{ steps.get-ip.outputs.ip }}
          echo ""
          echo "📊 배포 요약"
          echo "============================================"
          echo "VM IP: $IP"
          echo "Frontend: http://$IP"
          echo "Backend: http://$IP:8080"
          echo "Health Check: ${{ steps.health-check.outcome }}"
          echo ""
          if [ "${{ steps.health-check.outcome }}" != "success" ]; then
            echo "⚠️  헬스 체크가 실패했습니다."
            echo "위의 로그를 확인하여 문제를 진단하세요."
          fi

